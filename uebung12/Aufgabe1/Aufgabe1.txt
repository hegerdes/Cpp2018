Nr.1
a)
Nehmen Sie an, sie haben eine Software programmiert, mit deren Hilfe sich ähnlich wie in unserer Software
2D Sprites rendern lassen. Anders als bei unserem Ansatz haben Sie sich allerdings dazu entschieden, keine
eigene Template-Klasse zur Repräsentation von 2D-Koordinaten (analog zu unserer Klasse Vector) zu
schreiben. Stattdessen sollen die Renderable-Klassen direkt über den Typ des Vektors vertemplatet werden,
d.h., der Typ zur Vektor-Repräsentation ist ein Template-Parameter der Klasse Renderable und ihrer
Unterklassen. Erläutern Sie vor- und Nachteile dieses Ansatzes.

-> Vorteile:
Der größte vorteil von einem solchem Ansatz ist die mögliche Kompileroptimierung 
die dann stattfinden kann, vorrausgesetzt gesetzte Werte sind zur Kompilzeit bekannt (Performance).
Außerdem ist die Renderable-Klasse dann viel felxibler einsetzbar, da es ein template ist.
Damit einher kommen dann auch die mi templates einhergehende Typsicherheit (solange man 
nicht wild hin und her castet)(Flexibilität)

->Nachteile:
Die Syntax des Programms wird schwerer zu verstehen.
Template Meta Programming ist nicht jedem einen Begriff.
Längere Kompilzeit, bzw. deutlich cryptischere Fehlermeldungen
Schwerer zu debugen.

b)
Type Traits ist zum checken der Typinformationen, bzw ob bestimmte functionalitäten vorhanden sind.
Dazu geibt es verschiedene Funktionen.
Um zu prüfen ob Renderable die functionalität besitzt kann man is_base_of<A,B> nutzen.